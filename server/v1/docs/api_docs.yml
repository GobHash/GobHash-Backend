---
swagger: "2.0"
info:
  description: "GobHash.Inc"
  version: "1.0.0"
  title: "Private API"
host: "localhost:3000"
basePath: "/v1"
schemes:
- "http"
consumes:
  - application/json
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
produces:
- "application/json"
paths:
  /auth/login:
    post:
      security:
        - Bearer: []
      tags:
      - "Auth"
      summary: "Login user"
      description: "Login endpoint"
      operationId: "postLogin"
      parameters:
      - name: "loginBody"
        in: "body"
        description: "Login object"
        required: true
        schema:
          $ref: "#/definitions/Login"

      responses:
        200:
          description: "Authorization Token"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /auth/random-number:
    get:
      security:
        - Bearer: []
      tags:
      - "Auth"
      summary: "Get random number"
      description: "Test Protected route"
      operationId: "authRandomGET"
      responses:
        200:
          description: "User Token and Random number"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /auth/reset:
    post:
      tags:
      - "Auth"
      summary: "Request to reset password"
      description: "Initial flow to reset a users's password. Sends email to user."
      operationId: "authResetPOST"
      parameters:
      - name: "AuthBody"
        in: "body"
        description: "Auth Reset body"
        required: true
        schema:
          $ref: "#/definitions/Auth"

      responses:
        200:
          description: "Reset token"
          schema:
            type: "object"
            $ref: "#/definitions/ResetPassword"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /auth/reset/{token}:
    get:
      tags:
      - "Auth"
      summary: "Validate token in URL"
      description: "Search for valid valid reset token. Returns user object"
      operationId: "validateResetPOST"
      parameters:
      - name: "token"
        in: "path"
        description: "Reset password token"
        required: true
        type: "string"
      responses:
        200:
          description: "Reset token"
          schema:
            type: "object"
            $ref: "#/definitions/User"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
definitions:
  Login:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
  Auth:
    type: "object"
    properties:
      username:
        type: "string"
      email:
        type: "string"

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      username:
        type: "string"

  ResetPassword:
    type: "object"
    properties:
      message:
        type: "string"
      token:
        type: "string"
  Error:
    type: "object"
    properties:
      name:
        type: "string"
      message:
        type: "string"
      errrors:
        type: "array"
        items:
          type: "string"
